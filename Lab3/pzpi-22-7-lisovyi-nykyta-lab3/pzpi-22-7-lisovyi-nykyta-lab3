Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
 
 
Лабораторна робота 
з дисципліни «Архітектура програмного забезпечення»
з теми: «Розробка програмної архітектури та створення і відлагодження програмного коду пристрою інтернету речей (iot)  або розумного пристроя (smart device) програмної системи» 
 
Виконав
ст. гр. ПЗПІ-22-7
Лісови Нікіта Андрійович
30 квітня 2025 р.  
Перевірив
ст. викл. каф. ПЗ
Сокорчук І. П. 





Харків 2025
3.1 Історія змін
Таблиця 1.1 – Історія змін звіту
	№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	10.04.2025
	0.1
	Створено IoT-пристрій 
	2
	05.05.2025
	0.2
	Створено розділ «Аналіз завдання»,
 «Хід роботи»,
 «Висновки» та додатки
«Додаток А», «Додаток Б», «Додаток В», «Додаток Г», «Додаток Д», «Додаток Е»
	3
	29.05.2025
	0.3
	Записано відео презентацію
	4
	31.05.2025
	1.0
	перевірено відповідність вимогам ДСТУ 3008:2015
	

________________


3.2        Аналіз завдання  


Метою лабораторної роботи є розробка програмного забезпечення для IoT-пристрою — датчика відкриття/закриття дверей на базі ESP32 з ультразвуковим сенсором HC-SR04. Пристрій є частиною комплексної системи "Safe Home" і взаємодіє з серверною частиною через REST API. Основна задача — відстеження стану дверей та передача інформації на сервер для подальшої обробки та сповіщення користувача.


3.3        Хід роботи


3.3.1 Опис прийнятих інженерних рішень
Платформа: ESP32 DevKit v1, емуляція у Wokwi.
Датчик: HC-SR04 для визначення стану дверей (відкрито/закрито).
Світлодіод: Індикація стану дверей.
Підключення: Wi-Fi (Wokwi-GUEST).
Протокол взаємодії: REST API (PUT-запит на сервер).
Захист: Передача email, пароля, sensor_id для автентифікації.
Мова програмування: C++ (Arduino framework).
Бібліотеки: WiFi.h, HTTPClient.h, ArduinoJson.h.


3.3.2 Опис архітектури та взаємодії
Будова програмного забезпечення:
* setup_wifi() — підключення до Wi-Fi;
* read_sensor() — зчитування стану дверей з HC-SR04;
* sendData() — формування та відправка PUT-запиту на сервер;
* main loop — основний цикл: вимірювання, перевірка зміни стану, відправка даних, затримка.
Взаємодія з іншими частинами системи:
* при зміні стану дверей пристрій формує JSON-запит із параметрами (email, password, sensor_id, is_closed) та надсилає його на сервер;
* серверна частина (Flask API) приймає запит, перевіряє автентичність користувача, оновлює статус датчика у базі даних та повертає відповідь.


3.3.3. UML діаграма прецедентів (Use Case Diagram)
На діаграмі (Див. Додаток Б) показано основні сценарії використання IoT-пристрою:
* налаштування IoT пристрою;
* прив’язка пристрою до датчика;
* передача даних про зміну статусу датчика на сервер;
* Обробка відправлених даних від IoT на сервері.


3.3.4. UML діаграма діяльності (Activity Diagram)
Діаграма (Див. Додаток В) ілюструє покрокову логіку роботи пристрою:
* ініціалізація пристрою та підключення до Wi-Fi;
* введення email, пароля, sensor_id через Serial;
* ініціалізація датчика;
* основний цикл: вимірювання відстані, перевірка зміни стану дверей, формування та відправка PUT-запиту, обробка відповіді, затримка.


3.3.5. UML діаграма взаємодії (Interaction Overview Diagram)
Діаграма (Див. Додаток Г) показує основні підсистеми та їхню взаємодію:
* підключення до мережі Wi-Fi;
* користувач вводе даних;
* датчик вимірює стан дверей;
* на сервер відправляється PUT-запит, обробка відповіді, очікування наступного вимірювання.

3.3.6. UML діаграма компонент (Component Diagram)
Діаграма (Див. Додаток Д) відображає компоненти IoT-пристрою:
* ESP32 Controller керує всіма процесами;
* HC-SR04 Sensor вимірює відстань;
* WiFi Module забезпечує підключення до мережі;
* Serial Interface введення email, пароля, sensor_id;
* LED Indicator індикація стану;
* IoT Firmware основні функції (setup_wifi, read_sensor, sendData, main loop);
* Flask API, IoT Route, AuthService, SensorService, Database.


3.3.6. Функціональне тестування
Тестування проводилось у середовищі Wokwi. Перевірялась робота пристрою при зміні стану дверей, коректність відправки даних на сервер, обробка відповіді, індикація стану. Відеозапис тестування завантажено на YouTube (Див. Додаток А).


3.4        Висновки        


У ході виконання лабораторної роботи було розроблено програмне забезпечення для IoT-пристрою на базі ESP32, реалізовано інтеграцію з серверною частиною через REST API, протестовано основні сценарії роботи пристрою. Отримано практичні навички розробки для вбудованих систем та IoT.
________________


ДОДАТОК А
Відеозапис презентації результатів лабораторної роботи: 
https://youtu.be/gl36IdIz2Oo
Хронологічний опис відеозапису:
* 00:00  --  Тема роботи
* 00:20  --  Опис виконаної роботи
* 02:05  --   Функціональне тестування IOT частина програмної системи
________________


ДОДАТОК Б
UML діаграму прецедентів (Use Case Diagram)


  

________________


ДОДАТОК В
UML діаграму діяльности (Activity Diagram)


  
________________

ДОДАТОК Г
UML діаграму взаємодії (Interaction Overview Diagram)
  

________________


ДОДАТОК Д
UML діаграму компонент (Component Diagram)


  
________________

ДОДАТОК Е
Програмний код
Е.1. Код датчику
GitHub репозиторій: https://github.com/NureLisovyiNykyta/apz-pzpi-22-7-lisovyi-nykyta/blob/main/Lab3/pzpi-22-7-lisovyi-nykyta-lab3/pzpi-22-7-lisovyi-nykyta-lab3-code/sketch.ino

1  #include <WiFi.h>
2  #include <HTTPClient.h>
3  #include <ArduinoJson.h>
4  
5  // WiFi credentials
6  const char* ssid = "Wokwi-GUEST";
7  const char* password = "";
8  
9  // Server URL
10 const char* serverUrl = "https://safe-home-backend-d2f2atb3d0eee9ay.northeurope-01.azurewebsites.net/iot/send_sensor_status";
11 
12 // HC-SR04 pins
13 const int trig = 2;  // Adjusted to D2 for Wokwi
14 const int echo = 4;  // Adjusted to D4 for Wokwi
15 
16 // User credentials and sensor data
17 String email = "";
18 String userPassword = "";
19 String sensorID = "";
20 bool currentDoorState = false;
21 bool previousDoorState = false;
22 
23 // Function to connect to Wi-Fi
24 void setup_wifi() {
25   Serial.println("Connecting to WiFi...");
26   WiFi.begin(ssid, password);
27 
28   while (WiFi.status() != WL_CONNECTED) {
29     delay(500);
30     Serial.print(".");
31   }
32 
33   Serial.println("\nWiFi connected");
34   Serial.print("IP address: ");
35   Serial.println(WiFi.localIP());
36 }
37 
38 // Function to send data to the server
39 void sendData(bool newStatus) {
40   if (WiFi.status() == WL_CONNECTED) {
41     HTTPClient http;
42 
43     Serial.print("Sending data to: ");
44     Serial.println(serverUrl);
45 
46     http.begin(serverUrl);
47     http.addHeader("Content-Type", "application/json");
48 
49     // Create JSON document
50     DynamicJsonDocument doc(1024);
51     doc["email"] = email;
52     doc["password"] = userPassword;
53     doc["sensor_id"] = sensorID;
54     doc["is_closed"] = newStatus ? "true" : "false";
55 
56     String requestBody;
57     serializeJson(doc, requestBody);
58 
59     Serial.print("Request Body: ");
60     Serial.println(requestBody);
61 
62     int httpCode = http.PUT(requestBody);
63     Serial.print("HTTP Response code: ");
64     Serial.println(httpCode);
65 
66     if (httpCode == HTTP_CODE_OK) {
67       String response = http.getString();
68       Serial.print("Response: ");
69       Serial.println(response);
70     } else {
71       Serial.print("Error sending PUT: ");
72       Serial.println(httpCode);
73     }
74 
75     http.end();
76     Serial.println("--------------------");
77   }
78 }
79 
80 void setup() {
81   // Initialize serial communication
82   Serial.begin(115200);
83 
84   // Initialize WiFi
85   setup_wifi();
86 
87   // Prompt the user for credentials and sensor ID
88   Serial.println("Enter email:");
89   while (Serial.available() == 0) {
90     delay(100);
91   }
92   email = Serial.readStringUntil('\n');
93   email.trim();  // Remove whitespace
94 
95   Serial.println("Enter password:");
96   while (Serial.available() == 0) {
97     delay(100);
98   }
99   userPassword = Serial.readStringUntil('\n');
100  userPassword.trim();  // Remove whitespace
101 
102  Serial.println("Enter sensor ID:");
103  Serial.println("Enter password:");
104  while (Serial.available() == 0) {
105    delay(100);
106  }
107  sensorID = Serial.readStringUntil('\n');
108  sensorID.trim();  // Remove whitespace
109 
110  // Debug print the entered values
111  Serial.print("Email: ");
112  Serial.println(email);
113  Serial.print("Password: ");
114  Serial.println(userPassword);
115  Serial.print("Sensor ID: ");
116  Serial.println(sensorID);
117 
118  // Initialize HC-SR04 pins
119  pinMode(trig, OUTPUT);
120  pinMode(echo, INPUT);
121 }
122 
123 void loop() {
124   // Clear the TRIG pin by setting it low
125   digitalWrite(trig, LOW);
126   delayMicroseconds(2);
127   // Send a 10 microsecond pulse to TRIG to start the measurement
128   digitalWrite(trig, HIGH);
129   delayMicroseconds(10);
130   digitalWrite(trig, LOW);
131 
132   // Measure the time for the echo to return
133   long duration = pulseIn(echo, HIGH);
134 
135   // Calculate distance in centimeters
136   long distance = (duration * 0.034) / 2;
137 
138   // Determine door state based on the distance
139   if (distance > 40) {
140     currentDoorState = false;  // Door is open
141   } else {
142     currentDoorState = true;  // Door is closed
143   }
144 
145   // Send data if the door state has changed
146   if (currentDoorState != previousDoorState) {
147     sendData(currentDoorState);
148     previousDoorState = currentDoorState;
149   }
150 
151   delay(500);  // Delay for next reading
152 }
Е.2. Код специфікації датчику
GitHub репозиторій: https://github.com/NureLisovyiNykyta/apz-pzpi-22-7-lisovyi-nykyta/blob/main/Lab3/pzpi-22-7-lisovyi-nykyta-lab3/pzpi-22-7-lisovyi-nykyta-lab3-code/diagram.json

 1 {
 2   "version": 1,
 3   "author": "Nikita Lisovyi",
 4   "editor": "wokwi",
 5   "parts": [
 6     { "type": "wokwi-esp32-devkit-v1", "id": "esp", "top": 23.9, "left": -91.4, "attrs": {} },
 7     {
 8       "type": "wokwi-hc-sr04",
 9       "id": "ultrasonic1",
10       "top": -152.1,
11       "left": 53.5,
12       "attrs": { "distance": "2" }
13     },
14     { "type": "wokwi-led", "id": "led1", "top": -99.6, "left": -217, "attrs": { "color": "red" } }
15   ],
16   "connections": [
17     [ "esp:TX0", "$serialMonitor:RX", "", [] ],
18     [ "esp:RX0", "$serialMonitor:TX", "", [] ],
19     [ "ultrasonic1:VCC", "esp:3V3", "red", [ "v0" ] ],
20     [ "ultrasonic1:TRIG", "esp:D2", "green", [ "v0" ] ],
21     [ "ultrasonic1:ECHO", "esp:D4", "green", [ "v0" ] ],
22     [ "ultrasonic1:GND", "esp:GND.1", "black", [ "v0" ] ],
23     [ "esp:GND.2", "led1:C", "black", [ "h0" ] ],
24     [ "led1:A", "esp:D13", "green", [ "v0" ] ]
25   ],
26   "dependencies": {}
27 }


Е.3. Код роуту датчика
GitHub репозиторій: https://github.com/NureLisovyiNykyta/apz-pzpi-22-7-lisovyi-nykyta/blob/main/Lab2/pzpi-22-7-lisovyi-nykyta-lab2/pzpi-22-7-lisovyi-nykyta-lab2-code/app/routes/iot_routes.py

 1 from flask import Blueprint, request
 2 from app.services.auth import AuthService
 3 from app.services.sensor_service import SensorService
 4 from app.utils.error_handler import handle_errors
 5 from app.utils.error_handler import UnauthorizedError
 6 from flasgger import swag_from
 7 
 8 iot_bp = Blueprint('iot', __name__)
 9 
10 
11 @iot_bp.route('/send_sensor_status', methods=['PUT'])
12 @swag_from({
13     'tags': ['IoT'],
14     'summary': 'Update sensor status (for IoT devices)',
15     'parameters': [
16         {
17             'name': 'body',
18             'in': 'body',
19             'required': True,
20             'schema': {
21                 'type': 'object',
22                 'properties': {
23                     'email': {'type': 'string'},
24                     'password': {'type': 'string'},
25                     'sensor_id': {'type': 'string'},
26                     'is_closed': {'type': 'string', 'enum': ['true', 'false', '1', '0']}
27                 },
28                 'required': ['sensor_id', 'is_closed']
29             }
30         }
31     ],
32     'responses': {
33         200: {'description': 'Sensor status updated successfully'},
34         400: {'description': 'Validation error'},
35         401: {'description': 'Unauthorized'},
36         422: {'description': 'Unprocessable entity'},
37         500: {'description': 'Internal server error'}
38     }
39 })
40 @handle_errors
41 def send_sensor_status():
42     data = request.get_json()
43     user = AuthService.login_user(data)
44     if user:
45         return SensorService.set_sensor_status(user.user_id, request.json)
46     else:
47         raise UnauthorizedError('Sensor status update failed. Invalid credentials.')