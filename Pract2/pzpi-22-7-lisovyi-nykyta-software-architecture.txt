Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт 
з практичного заняття №2
з дисципліни «Архітектура програмного забезпечення»
за темою «Архітектура Docker»








Харків 2025

1 ІСТОРІЯ ЗМІН

　　　　Таблиця 1.1 – Історія змін звіту
№	Дата	Версія звіту	Опис змін та виправлень
1	03.05.2025	0.1	Створено презентацію “Архітектура Docker”
2	04.05.2025	0.2	Записано відео презентацію
3	05.05.2025	0.3	Створено розділ «Завдання»,
 «Опис виконаної роботи», 
 «Висновки» та додатки 
«Додаток А», «Додаток Б», «Додаток В»
4	06.05.2025	1.0	перевірено відповідність вимогам ДСТУ 3008:2015
　　　　
　　　　
　　　　
　　　　

2 ЗАВДАННЯ
　　　　
　　　　Метою є аналіз архітектури програмної системи Docker, розгляд її основних компонентів, реалізованих принципів архітектури програмного забезпечення, механізмів зберігання даних, організації мережі та принципів роботи з контейнерами й образам.
　　　　
3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Аналіз архітектури Docker

　　　　Архітектура Docker є прикладом сучасної платформи для контейнеризації, що забезпечує ізоляцію додатків, їх портативність і масштабованість. Docker базується на клієнт-серверній архітектурі, де клієнт взаємодіє з демоном через визначений інтерфейс (Docker API). Система побудована модульно, з чітким розподілом функцій між компонентами, що сприяє її гнучкості та розширюваності.
　　　　Основні принципи архітектури, реалізовані в Docker:
Модульність: система складається з незалежних компонентів із чітко визначеними функціями.
Клієнт-серверна архітектура: Docker Client комунікує з Docker Daemon через REST API.
Ізоляція: контейнери працюють ізольовано завдяки технологіям ядра Linux (Namespaces, cgroups).
Шаруватість: образи Docker складаються з шарів, що оптимізують зберігання та повторне використання.
　　　　
Розширюваність: можливість додавання нових функцій через плагіни та інтеграцію.
Масштабованість: підтримка розподілених систем і зростання навантаження.
Відкритість до інтеграції: сумісність із зовнішніми інструментами (Kubernetes, CI/CD).

3.2 Основні компоненти Docker
　　　　Платформа Docker складається з трьох ключових компонентів:
Docker Client – інтерфейс для взаємодії користувача з Docker. Він надсилає команди до Docker Daemon через REST API для управління контейнерами, образами, мережами тощо.
Docker Daemon – основний двигун, що обробляє запити, взаємодіє з ядром Linux і керує контейнерами, образами, мережами та томами.
Docker Registry – сховище для зберігання та розповсюдження Docker-образів (наприклад, Docker Hub або приватні реєстри).
　　　　
　　　　2.3 Компоненти Docker Daemon
　　　　Docker Daemon включає низку модулів для виконання своїх функцій:
containerd: демон для управління життєвим циклом контейнерів і образів через gRPC API.
runc: низькорівневий інструмент для запуску контейнерів, що взаємодіє з ядром Linux.
　　　　
　　　　
libcontainer: бібліотека для ізоляції контейнерів через Namespaces і cgroups.
libnetwork: модуль для управління мережами (bridge, host, overlay).
libstorage: керує сховищем, шарами образів і томами.
Docker Registry Client: відповідає за завантаження та відправлення образів.
Logging Drivers: обробка логів контейнерів (json-file, syslog, journald).
Metrics and Monitoring: збір метрик (CPU, пам’ять) для моніторингу.
　　　　
　　　　2.4 Об’єкти, якими оперує Docker Daemon
　　　　Docker Daemon працює з такими об’єктами:
Контейнери: ізольовані середовища, що містять додаток, бібліотеки, конфігурації та файлову систему. Використовують Namespaces для ізоляції процесів і cgroups для обмеження ресурсів.
Образи: шаблони для створення контейнерів, що складаються з шарів (кешуються для ефективності). Зберігаються в локальних або віддалених реєстрах.
Мережі: віртуальні мережі (bridge, host, overlay) для комунікації між контейнерами та зовнішнім світом.
Сховища: включають томи (volumes), bind mounts і tmpfs mounts для зберігання даних.
　　　　
　　　　2.5 Зберігання даних у Docker
　　　　Docker пропонує три механізми для роботи з даними:
　　　　
Volumes: керовані Docker сховища, що зберігаються в /var/lib/docker/volumes. Найкраще для продакшену, наприклад, для баз даних.
Bind Mounts: прив’язка директорій або файлів хоста до контейнера. Зручні для розробки, але менш портативні.
tmpfs Mounts: тимчасове сховище в оперативній пам’яті хоста, дані зникають після зупинки контейнера.
　　　　
　　　　2.6 Мережа в Docker
　　　　Docker створює віртуальні мережі для комунікації контейнерів між собою та із зовнішнім світом. Кожен контейнер отримує власну IP-адресу та DNS-ім’я. Основні типи мереж:
Bridge: мережа за замовчуванням для ізольованої комунікації.
Host: контейнер використовує мережу хоста.
Overlay: для розподілених систем із кількома хостами.
　　　　
　　　　

4 ВИСНОВКИ

　　　　У ході роботи було проведено детальний аналіз архітектури Docker з точки зору програмного забезпечення. Було розглянуто її реалізовані принципи архітектури програмного забезпечення. Аналіз головних компонентів платформи — Docker Client, Docker Daemon, Docker Registry — показав, як взаємодіють частини системи. Аналіз показав, що Docker відповідає принципи архітектури ПЗ. Було детально описано механізми зберігання даних у Docker, способи організації мережі між контейнерами, а також принципи створення та використання Docker Images і Docker Containers.
　　　　Таким чином, проведене дослідження дозволяє глибше зрозуміти внутрішню архітектуру Docker та його роль як інструменту для сучасної розробки, розгортання і масштабування програмних рішень.

ДОДАТОК А ПОСИЛАННЯ НА ВІДЕОЗАПИС ДОПОВІДІ ТА ХРОНОЛОГІЧНИЙ ОПИС

Відеозапис доповіді на YouTube: https://youtu.be/GzLrGHISs8M
00:00 -- Тема та зміст роботи 
00:30 -- Що таке Docker? 
00:50 -- Реалізовані принципи архітектури ПЗ 
01:20 -- Головні компоненти Docker 
01:50 -- Компоненти Docker Daemon 
02:25 -- Об’єкти якими оперує Docker Daemon 
02:45 -- Docker Conteiners 
03:15 -- Docker Images 
03:45 -- Зберігання даних у Docker 
04:25 -- Мережа в Docker 
05:20 -- Висновки та Джерела

ДОДАТОК Б
Презентація

Рисунок Б.1 – Титульна сторінка презентації


Рисунок Б.2 – Зміст презентації


Рисунок Б.3 – Що таке Docker?

Рисунок Б.4 – Принципи архітектури ПЗ, реалізовані в Docker


Рисунок Б.5 – Головні компоненти Docker

Рисунок Б.6 – Компоненти Docker Daemon


Рисунок Б.7 – Об’єкти якими оперує Docker Daemon


Рисунок Б.8 – Docker Conteiners (контейнери)



Рисунок Б.9 – Docker Images (Образи)


Рисунок Б.10 – Зберігання даних у Docker 

Рисунок Б.11 – Мережа в Docker


Рисунок Б.12 – Висновки

Рисунок Б.13 – Джерела

ДОДАТОК В ПРОГРАМНИЙ КОД

1  # Використовуємо офіційний образ Python 
2  FROM python:3.11 
3  # Встановлюємо робочу директорію 
4  WORKDIR /app 
5  # Копіюємо файл із залежностями 
6  COPY requirements.txt . 
7  # Встановлюємо залежності 
8  RUN pip install --no-cache-dir -r requirements.txt 
9  # Копіюємо всі файли проєкту 
10  COPY . . 
11  # Відкриваємо порт 5000 
12  EXPOSE 5000 
13  # Запускаємо додаток через Gunicorn 
14  CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "run:flask_app"]
